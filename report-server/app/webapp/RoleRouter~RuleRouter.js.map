{"version":3,"sources":["webpack:///./src/page/system/rule/ruleInfo.jsx","webpack:///./src/service/RoleService.jsx","webpack:///./src/service/RuleService.jsx","webpack:///./src/util/HttpService.jsx"],"names":["TreeNode","_role","Role","ruleSevie","RuleService","Search","TabPane","Option","RuleInfo","props","onExpand","expandedKeys","setState","autoExpandParent","onCheck","checkedKeys","info","checkedKeyVal","checked","treedatas","state","treeData","node","parentNodes","arr2","getNode","eventKey","array","Array","from","Set","undefined","children","childrenData","isChecked","showExcelRuleTreeNodeReact","renderTreeNodes","data","map","item","title","key","onChangeTab","activeKey","name","roleName","roleId","selectedOnchage","panes","newTabIndex","match","params","list","pageNum","perPage","listType","selectedKeys","tabPosition","loadRoleList","listParam","getRoleList","then","response","e","target","value","trim","index","push","i","length","splice","json","nodeId","obj","types","isChange","type","getAuthListByConditions","resultCode","funcId","getSelectClassTree","status","getAuthByConditions","getDirectory","getFunctionClass","getFunRuleList","getAuthByConditionsTable","getAllAuthTypeList","getAllCube","getAllDashBoard","param","saveAuthRules","success","dataSource","columns","dataIndex","render","text","record","contents","saveSelectObject","float","width","maxWidth","marginBottom","marginLeft","marginRight","border","onSearch","onValueChange","total","onPageNumChange","React","Component","HttpService","post","JSON","stringify","roleInfo","_id","id","url","authType","localStorge","LocalStorge","window","getServerUrl","n","getStorage","location","href","Promise","resolve","reject","myurl","getBaseUrl","console","log","fullUrl","opts","method","headers","credentials","body","fetch","catch","error"],"mappings":"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","file":"RoleRouter~RuleRouter.js","sourcesContent":["\r\nimport React                from 'react';\r\nimport Role                 from '../../../service/RoleService.jsx';\r\nimport RuleService          from '../../../service/RuleService.jsx';\r\n\r\nimport { Table, Button, Card, Tooltip, Input, message, Tree, Tabs, Select } from 'antd';\r\nimport Pagination           from 'antd/lib/pagination';\r\n\r\nconst TreeNode = Tree.TreeNode;\r\nconst _role = new Role();\r\nconst ruleSevie =new RuleService();\r\nconst Search=Input.Search;\r\nconst TabPane = Tabs.TabPane;\r\nconst Option = Select.Option;\r\n\r\n\r\nclass RuleInfo extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        const panes = [];\r\n        this.parentNodes = [];\r\n        this.node = null;\r\n        this.newTabIndex = 0;\r\n        this.state = {\r\n            roleId:this.props.match.params.roleId,\r\n            list : [],\r\n            pageNum         : 1,\r\n            perPage         : 10,\r\n            listType:'list',\r\n            expandedKeys:[],\r\n            autoExpandParent: true,\r\n            checkedKeys: [],\r\n            selectedKeys: [],\r\n            tabPosition: 'top',\r\n            treeData:[],\r\n            activeKey:\"select\",\r\n            roleName:'',\r\n            panes,\r\n        };\r\n    }\r\n    \r\n    componentDidMount(){\r\n        this.loadRoleList();\r\n        if(null!=this.state.roleId && ''!=this.state.roleId && 'null'!=this.state.roleId){\r\n            this.selectedOnchage(this.state.roleId,'','','');\r\n        }\r\n        \r\n    }\r\n    loadRoleList(){\r\n        let listParam = {};\r\n        listParam.pageNum  = this.state.pageNum;\r\n        listParam.perPage  = this.state.perPage;\r\n        // 如果是搜索的话，需要传入搜索类型和搜索关键字\r\n        if(this.state.listType === 'search'){\r\n            listParam.roleName    = this.state.roleName;\r\n        }\r\n        _role.getRoleList(listParam).then(response => {\r\n            this.setState(response);\r\n           \r\n        }, errMsg => {\r\n            this.setState({\r\n                list : []\r\n            });\r\n        });\r\n        \r\n    }\r\n    onValueChange(e){\r\n        let name = e.target.name,\r\n        value = e.target.value.trim();\r\n           \r\n        this.setState({roleName:value});\r\n    }\r\n    // 搜索\r\n    onSearch(){\r\n        this.setState({\r\n            pageNum         : 1,\r\n            listType :'search'\r\n        }, () => {\r\n            this.loadRoleList();\r\n        });\r\n    }\r\n    // 页数发生变化的时候\r\n    onPageNumChange(pageNum){\r\n        this.setState({\r\n            pageNum : pageNum\r\n        }, () => {\r\n            this.loadRoleList();\r\n        });\r\n    }\r\n    //tree\r\n    onExpand = (expandedKeys) => {\r\n        this.setState({\r\n          expandedKeys,\r\n          autoExpandParent: false,\r\n        });\r\n      }\r\n      //循环增加或删除选中项\r\n      showExcelRuleTreeNodeReact(isChecked,childrenData,checkedKeys){\r\n        if(!isChecked){\r\n            childrenData.map((item,index)=>{\r\n                checkedKeys.push(item.key);\r\n                if(undefined!=item.props.children && 'undefined'!=item.props.children){\r\n                    let childrenData=item.props.children;\r\n                    this.showExcelRuleTreeNodeReact(isChecked,childrenData,checkedKeys);\r\n                }\r\n            });\r\n        }else{\r\n            childrenData.map((item,index)=>{\r\n                for(var i=0;i<checkedKeys.length;i++){\r\n                    if(checkedKeys[i] == item.key){\r\n                        checkedKeys.splice(i,1);\r\n                        i--;\r\n                    }\r\n                }\r\n                if(undefined!=item.props.children && 'undefined'!=item.props.children){\r\n                    let childrenData=item.props.children;\r\n                    this.showExcelRuleTreeNodeReact(isChecked,childrenData,checkedKeys);\r\n                }\r\n            });\r\n        }\r\n        this.setState({ checkedKeys:checkedKeys },function(){});\r\n      }\r\n      //check事件\r\n      onCheck = (checkedKeys,info) => {\r\n        let checkedKeyVal= checkedKeys.checked;\r\n        let treedatas=this.state.treeData;\r\n        this.node=null;\r\n        this.parentNodes=[];\r\n        //获取父节点key\r\n        let arr2 =  this.getNode(treedatas,info.node.props.eventKey);\r\n        //var arr = [...checkedKeyVal,...arr2];\r\n        let array = Array.from(new Set([...checkedKeyVal,...arr2]));\r\n\r\n            if(undefined!=info.node.props.children && 'undefined'!=info.node.props.children){\r\n                let childrenData=info.node.props.children;\r\n                let isChecked=info.node.props.checked;\r\n                this.showExcelRuleTreeNodeReact(isChecked,childrenData,array);\r\n            }else{\r\n                this.setState({ checkedKeys:array },function(){});\r\n            }\r\n            \r\n      }\r\n      \r\n      getNode(json, nodeId) {\r\n        //1.第一层 root 深度遍历整个JSON\r\n        var i = 0;\r\n        for (i; i < json.length; i++) {\r\n            if (this.node) {\r\n                break;\r\n            }\r\n            var obj = json[i];\r\n            //没有就下一个\r\n            if (!obj || !obj.key) {\r\n                continue;\r\n            }\r\n\r\n            //2.有节点就开始找，一直递归下去\r\n            if (obj.key == nodeId) {\r\n                //找到了与nodeId匹配的节点，结束递归\r\n                this.node = obj;\r\n                break;\r\n            } else {\r\n                //3.如果有子节点就开始找\r\n                if (obj.children) {\r\n                    this.parentNodes.push(obj.key);\r\n                    //递归往下找\r\n                    this.getNode(obj.children, nodeId);\r\n                } else {\r\n                    //跳出当前递归，返回上层递归\r\n                    continue;\r\n                }\r\n            }\r\n        }\r\n        //如果这个循环都没有，则删除父节点\r\n        if(i==json.length){\r\n            this.parentNodes.splice(this.parentNodes.length-1,1);\r\n        }\r\n        //6.返回结果obj\r\n        // return {\r\n        //     parentNode: this.parentNodes,\r\n        //     node: this.node\r\n        // };\r\n        return  this.parentNodes;\r\n    }\r\n\r\n      renderTreeNodes = (data) => {\r\n        return data.map((item) => {\r\n          if (item.children) {\r\n            return (\r\n              <TreeNode title={item.title} key={item.key} dataRef={item}>\r\n                {this.renderTreeNodes(item.children)}\r\n              </TreeNode>\r\n            );\r\n          }\r\n          return <TreeNode {...item} />;\r\n        });\r\n      }\r\n     \r\n     selectedOnchage(roleId,name,types,isChange){\r\n        this.setState({roleId:roleId,roleName:name,expandedKeys:[],checkedKeys: []},function(){\r\n         let type='select';\r\n            if(''!=types){\r\n                 type=types;\r\n            }else{\r\n                type=this.state.activeKey;\r\n            }\r\n             if(type=='select'){\r\n                 //如果treeData不为空，根据人名称查人员选中事项\r\n                 if(this.state.treeData.length>0 && ''==isChange){\r\n                    ruleSevie.getAuthListByConditions(roleId,type).then(response=>{\r\n                        let  selectedKeys=[];\r\n                        if(response.resultCode!='3000'){\r\n                            response.map((item,index)=>{\r\n                                selectedKeys.push(item.funcId);\r\n                            })\r\n                            this.setState({\r\n                                expandedKeys:selectedKeys,\r\n                                checkedKeys: selectedKeys,\r\n                            });  \r\n                        }                 \r\n                    });\r\n                 }else{\r\n                     //如果treeData为空，根据人与当前tabKey进行先查询treeData后查人员选中事项\r\n                     this.setState({treeData:[]});\r\n                     ruleSevie.getSelectClassTree().then(response=>{\r\n                        if(response.status!=500){\r\n                            this.setState({treeData:response});\r\n                            ruleSevie.getAuthListByConditions(roleId,type).then(response=>{\r\n                                let  selectedKeys=[];\r\n                                if(response.resultCode!='3000'){\r\n                                    response.map((item,index)=>{\r\n                                        selectedKeys.push(item.funcId);\r\n                                    })\r\n                                    this.setState({\r\n                                        expandedKeys:selectedKeys,\r\n                                        checkedKeys: selectedKeys,\r\n                                    });  \r\n                                }                 \r\n                            });\r\n                        }\r\n                    });\r\n                }\r\n             }else if(type=='template'){\r\n                  //如果treeData不为空，根据人名称查人员选中事项\r\n                  if(this.state.treeData.length>0 && ''==isChange){\r\n                    ruleSevie.getAuthByConditions(roleId,type).then(response=>{\r\n                        let  selectedKeys=[];\r\n                        if(response.resultCode!='3000'){\r\n                            response.map((item,index)=>{\r\n                                selectedKeys.push(item.funcId);\r\n                            })\r\n                            this.setState({\r\n                                expandedKeys:selectedKeys,\r\n                                checkedKeys: selectedKeys,\r\n                            });  \r\n                       }                 \r\n                    });\r\n                 }else{\r\n                     //如果treeData为空，根据人与当前tabKey进行先查询treeData后查人员选中事项\r\n                    this.setState({treeData:[]});\r\n                    ruleSevie.getDirectory().then(response=>{\r\n                        if(response.status!=500){\r\n                                this.setState({treeData:response});\r\n                                ruleSevie.getAuthByConditions(roleId,type).then(response=>{\r\n                                    let  selectedKeys=[];\r\n                                    if(response.resultCode!='3000'){\r\n                                        response.map((item,index)=>{\r\n                                            selectedKeys.push(item.funcId);\r\n                                        })\r\n                                        this.setState({\r\n                                            expandedKeys:selectedKeys,\r\n                                            checkedKeys: selectedKeys,\r\n                                        });  \r\n                                    }                  \r\n                                });\r\n                        }\r\n                    });\r\n                }\r\n             }else if(type=='function'){\r\n                    //如果treeData不为空，根据人名称查人员选中事项\r\n                    if(this.state.treeData.length>0 && ''==isChange){\r\n                        ruleSevie.getAuthByConditions(roleId,type).then(response=>{\r\n                            let  selectedKeys=[];\r\n                            if(response.resultCode!='3000'){\r\n                                response.map((item,index)=>{\r\n                                    selectedKeys.push(item.funcId);\r\n                                })\r\n                                this.setState({\r\n                                    expandedKeys:selectedKeys,\r\n                                    checkedKeys: selectedKeys,\r\n                                });  \r\n                            }                 \r\n                        });\r\n                    }else{\r\n                        //如果treeData为空，根据人与当前tabKey进行先查询treeData后查人员选中事项\r\n                        this.setState({treeData:[]});\r\n                        ruleSevie.getFunctionClass().then(response=>{\r\n                            if(response.status!=500){\r\n                                this.setState({treeData:response});\r\n                                ruleSevie.getAuthByConditions(roleId,type).then(response=>{\r\n                                    let  selectedKeys=[];\r\n                                    if(response.resultCode!='3000'){\r\n                                        response.map((item,index)=>{\r\n                                            selectedKeys.push(item.funcId);\r\n                                        })\r\n                                        this.setState({\r\n                                            expandedKeys:selectedKeys,\r\n                                            checkedKeys: selectedKeys,\r\n                                        });  \r\n                                    }                   \r\n                                });\r\n                            }\r\n                        });\r\n                    }\r\n             }else if(type=='func'){\r\n                 //如果treeData不为空，根据人名称查人员选中事项\r\n                 if(this.state.treeData.length>0 && ''==isChange){\r\n                        ruleSevie.getAuthByConditions(roleId,type).then(response=>{\r\n                            let  selectedKeys=[];\r\n                            if(response.resultCode!='3000'){\r\n                                response.map((item,index)=>{\r\n                                    selectedKeys.push(item.funcId);\r\n                                })\r\n                                this.setState({\r\n                                    expandedKeys:selectedKeys,\r\n                                    checkedKeys: selectedKeys,\r\n                                });  \r\n                            }                 \r\n                        });\r\n                }else{\r\n                    //如果treeData为空，根据人与当前tabKey进行先查询treeData后查人员选中事项\r\n                    this.setState({treeData:[]});\r\n                    ruleSevie.getFunRuleList('excel').then(response=>{\r\n                        if(response.status!=500){\r\n                                this.setState({treeData:response});\r\n                                ruleSevie.getAuthByConditions(roleId,type).then(response=>{\r\n                                    let  selectedKeys=[];\r\n                                    if(response.resultCode!='3000'){\r\n                                        response.map((item,index)=>{\r\n                                            selectedKeys.push(item.funcId);\r\n                                        })\r\n                                        this.setState({\r\n                                            expandedKeys:selectedKeys,\r\n                                            checkedKeys: selectedKeys,\r\n                                        });  \r\n                                    }                 \r\n                                });\r\n                        }\r\n                    });\r\n                }\r\n             }else if(type=='webFunc'){\r\n                 //如果treeData不为空，根据人名称查人员选中事项\r\n                 if(this.state.treeData.length>0 && ''==isChange){\r\n                    ruleSevie.getAuthByConditions(roleId,type).then(response=>{\r\n                        let  selectedKeys=[];\r\n                        if(response.resultCode!='3000'){\r\n                            response.map((item,index)=>{\r\n                                selectedKeys.push(item.funcId);\r\n                            })\r\n                            this.setState({\r\n                                expandedKeys:selectedKeys,\r\n                                checkedKeys: selectedKeys,\r\n                            });  \r\n                        }                 \r\n                    });\r\n                 }else{\r\n                    //如果treeData为空，根据人与当前tabKey进行先查询treeData后查人员选中事项\r\n                    this.setState({treeData:[]});\r\n                    ruleSevie.getFunRuleList('reactWeb').then(response=>{\r\n                        if(response.status!=500){\r\n                            this.setState({treeData:response});\r\n                            ruleSevie.getAuthByConditions(roleId,type).then(response=>{\r\n                                let  selectedKeys=[];\r\n                                if(response.resultCode!='3000'){\r\n                                    response.map((item,index)=>{\r\n                                        selectedKeys.push(item.funcId);\r\n                                    })\r\n                                    this.setState({\r\n                                        expandedKeys:selectedKeys,\r\n                                        checkedKeys: selectedKeys,\r\n                                    });  \r\n                                }                   \r\n                            });\r\n                        }\r\n                    });\r\n                }\r\n             }else if(type=='table'){\r\n                //如果treeData不为空，根据人名称查人员选中事项\r\n                if(this.state.treeData.length>0 && ''==isChange){\r\n                   ruleSevie.getAuthByConditionsTable(roleId,type).then(response=>{\r\n                       let  selectedKeys=[];\r\n                       if(response.resultCode!='3000'){\r\n                           response.map((item,index)=>{\r\n                               selectedKeys.push(item.funcId);\r\n                           })\r\n                           this.setState({\r\n                               expandedKeys:selectedKeys,\r\n                               checkedKeys: selectedKeys,\r\n                           });  \r\n                       }                 \r\n                   });\r\n                }else{\r\n                       //如果treeData为空，根据人与当前tabKey进行先查询treeData后查人员选中事项\r\n                       this.setState({treeData:[]});\r\n                       ruleSevie.getAllAuthTypeList().then(response=>{\r\n                           if(response.resultCode!='3000'){\r\n                               this.setState({treeData:response.data});\r\n                               ruleSevie.getAuthByConditionsTable(roleId,type).then(response=>{\r\n                                   let  selectedKeys=[];\r\n                                   if(response.resultCode!='3000'){\r\n                                       response.map((item,index)=>{\r\n                                           selectedKeys.push(item.funcId);\r\n                                       })\r\n                                       this.setState({\r\n                                           expandedKeys:selectedKeys,\r\n                                           checkedKeys: selectedKeys,\r\n                                       });   \r\n                                    }         \r\n                                });\r\n                           }\r\n                       });\r\n               }\r\n               //  ruleSevie.getAllAuthTypeList().then(response=>{\r\n               //      if(response.resultCode!='3000'){\r\n               //         const panes = [];\r\n               //         const activeKey = `table`;\r\n               //         response.data.map((item,index)=>{\r\n               //             panes.push({ title: item.name, content: (\r\n               //                 <div>\r\n               //                     <Button type=\"primary\" onClick={()=>this.saveSelectObject()}>保存</Button>\r\n               //                     <Tree\r\n               //                         checkable\r\n               //                         onExpand={this.onExpand}\r\n               //                         expandedKeys={this.state.expandedKeys}\r\n               //                         autoExpandParent={this.state.autoExpandParent}\r\n               //                         onCheck={this.onCheck}\r\n               //                         checkedKeys={this.state.checkedKeys}                                       \r\n               //                         selectedKeys={this.state.selectedKeys}\r\n               //                     >\r\n               //                     {this.renderTreeNodes(this.state.treeData)}\r\n               //                     </Tree>\r\n               //                 </div>   \r\n               //            ), key: item.value });\r\n\r\n               //         })\r\n               //         this.setState({ panes, activeKey });\r\n               //      }\r\n               //     // this.setState({treeData:response});\r\n               //  });\r\n           }else if(type=='cube'){\r\n                //如果treeData不为空，根据人名称查人员选中事项\r\n                if(this.state.treeData.length>0 && ''==isChange){\r\n                    ruleSevie.getAuthByConditions(roleId,type).then(response=>{\r\n                        let  selectedKeys=[];\r\n                        if(response.resultCode!='3000'){\r\n                            response.map((item,index)=>{\r\n                                selectedKeys.push(item.funcId);\r\n                            })\r\n                            this.setState({\r\n                                expandedKeys:selectedKeys,\r\n                                checkedKeys: selectedKeys,\r\n                            });  \r\n                        }                 \r\n                    });\r\n                 }else{\r\n                        //如果treeData为空，根据人与当前tabKey进行先查询treeData后查人员选中事项\r\n                        this.setState({treeData:[]});\r\n                        ruleSevie.getAllCube().then(response=>{\r\n                            if(response.status!=500){\r\n                                    this.setState({treeData:response.data});\r\n                                    ruleSevie.getAuthByConditions(roleId,type).then(response=>{\r\n                                        let  selectedKeys=[];\r\n                                        if(response.resultCode!='3000'){\r\n                                            response.map((item,index)=>{\r\n                                                selectedKeys.push(item.funcId);\r\n                                            })\r\n                                            this.setState({\r\n                                                expandedKeys:selectedKeys,\r\n                                                checkedKeys: selectedKeys,\r\n                                            });  \r\n                                        }                 \r\n                                    });\r\n                            }\r\n                        });\r\n                }\r\n           }else if(type=='dashboard'){\r\n                //如果treeData不为空，根据人名称查人员选中事项\r\n                if(this.state.treeData.length>0 && ''==isChange){\r\n                    ruleSevie.getAuthByConditions(roleId,type).then(response=>{\r\n                        let  selectedKeys=[];\r\n                        if(response.resultCode!='3000'){\r\n                            response.map((item,index)=>{\r\n                                selectedKeys.push(item.funcId);\r\n                            })\r\n                            this.setState({\r\n                                expandedKeys:selectedKeys,\r\n                                checkedKeys: selectedKeys,\r\n                            });  \r\n                        }                 \r\n                    });\r\n                 }else{\r\n                        //如果treeData为空，根据人与当前tabKey进行先查询treeData后查人员选中事项\r\n                        this.setState({treeData:[]});\r\n                        ruleSevie.getAllDashBoard().then(response=>{\r\n                            if(response.status!=500){\r\n                                    this.setState({treeData:response.data});\r\n                                    ruleSevie.getAuthByConditions(roleId,type).then(response=>{\r\n                                        let  selectedKeys=[];\r\n                                        if(response.resultCode!='3000'){\r\n                                            response.map((item,index)=>{\r\n                                                selectedKeys.push(item.funcId);\r\n                                            })\r\n                                            this.setState({\r\n                                                expandedKeys:selectedKeys,\r\n                                                checkedKeys: selectedKeys,\r\n                                            });  \r\n                                        }                 \r\n                                    });\r\n                            }\r\n                        });\r\n                }\r\n           }\r\n            //  if(type=='ou'){\r\n            //      //如果treeData不为空，根据人名称查人员选中事项\r\n            //      if(this.state.treeData.length>0 && ''==isChange){\r\n            //         ruleSevie.getAuthByConditions(roleId,type).then(response=>{\r\n            //             let  selectedKeys=[];\r\n            //             if(response.resultCode!='3000'){\r\n            //                 response.map((item,index)=>{\r\n            //                     selectedKeys.push(item.funcId);\r\n            //                 })\r\n            //                 this.setState({\r\n            //                     expandedKeys:selectedKeys,\r\n            //                     checkedKeys: selectedKeys,\r\n            //                 });  \r\n            //             }                 \r\n            //         });\r\n            //     }else{\r\n            //             //如果treeData为空，根据人与当前tabKey进行先查询treeData后查人员选中事项\r\n            //             this.setState({treeData:[]});\r\n            //             ruleSevie.getAuthTypeListByType('ou').then(response=>{\r\n            //                 if(response.resultCode!='3000'){\r\n            //                     this.setState({treeData:response});\r\n            //                     ruleSevie.getAuthByConditions(roleId,type).then(response=>{\r\n            //                         let  selectedKeys=[];\r\n            //                         if(response.resultCode!='3000'){\r\n            //                             response.map((item,index)=>{\r\n            //                                 selectedKeys.push(item.funcId);\r\n            //                             })\r\n            //                             this.setState({\r\n            //                                 expandedKeys:selectedKeys,\r\n            //                                 checkedKeys: selectedKeys,\r\n            //                             });  \r\n            //                     }          \r\n            //                 });\r\n            //             }\r\n            //             });\r\n            //         }\r\n            //  }\r\n            //  if(type=='dept'){\r\n            //      //如果treeData不为空，根据人名称查人员选中事项\r\n            //      if(this.state.treeData.length>0 && ''==isChange){\r\n            //         ruleSevie.getAuthListByConditions(roleId,type).then(response=>{\r\n            //             let  selectedKeys=[];\r\n            //             if(response.resultCode!='3000'){\r\n            //                 response.map((item,index)=>{\r\n            //                     selectedKeys.push(item.funcId);\r\n            //                 })\r\n            //                 this.setState({\r\n            //                     expandedKeys:selectedKeys,\r\n            //                     checkedKeys: selectedKeys,\r\n            //                 });  \r\n            //             }                 \r\n            //         });\r\n            //      }else{\r\n            //             //如果treeData为空，根据人与当前tabKey进行先查询treeData后查人员选中事项\r\n            //             this.setState({treeData:[]});\r\n            //             ruleSevie.getAuthTypeListByType().then(response=>{\r\n            //                 if(response.resultCode!='3000'){\r\n            //                     this.setState({treeData:response});\r\n            //                     ruleSevie.getAuthListByConditions(roleId,type).then(response=>{\r\n            //                         let  selectedKeys=[];\r\n            //                         if(response.resultCode!='3000'){\r\n            //                             response.map((item,index)=>{\r\n            //                                 selectedKeys.push(item.funcId);\r\n            //                             })\r\n            //                             this.setState({\r\n            //                                 expandedKeys:selectedKeys,\r\n            //                                 checkedKeys: selectedKeys,\r\n            //                             });   \r\n            //                          }         \r\n            //                      });\r\n            //                 }\r\n            //             });\r\n            //     }\r\n            //  }\r\n             \r\n        });\r\n     }\r\n     onChangeTab = (activeKey) => {\r\n        this.setState({ activeKey:activeKey,treeData:[] },function () {\r\n            let name=this.state.roleName;\r\n            let roleId=this.state.roleId;\r\n            if(''!=roleId){\r\n                this.selectedOnchage(roleId,name,activeKey,'true');\r\n             }\r\n          });\r\n             \r\n      }\r\n    saveSelectObject(){\r\n            let param=[this.state.roleId,this.state.activeKey,this.state.checkedKeys];\r\n            ruleSevie.saveAuthRules(param).then(response=>{\r\n                message.success(\"保存成功\");\r\n            });\r\n    }\r\n    render(){\r\n        this.state.list.map((item,index)=>{\r\n            item.key=index;\r\n        })\r\n        const dataSource = this.state.list;\r\n          const columns = [{\r\n            dataIndex: 'roleName',\r\n            key: 'roleName',\r\n            render: (text, record)=> {\r\n                return <a href=\"javascript:;\" onClick={()=>this.selectedOnchage(record.roleId,record.roleName,'','')} >{text}</a>;\r\n            }\r\n          }];\r\n        const contents=(\r\n            <div>\r\n                    <Button type=\"primary\" onClick={()=>this.saveSelectObject()}>保存</Button>\r\n                    <Tree\r\n                        checkable\r\n                        onExpand={this.onExpand}\r\n                        expandedKeys={this.state.expandedKeys}\r\n                        autoExpandParent={this.state.autoExpandParent}\r\n                        onCheck={this.onCheck}\r\n                        checkedKeys={this.state.checkedKeys}\r\n                        selectedKeys={this.state.selectedKeys}\r\n                        checkStrictly\r\n                    >\r\n                    {this.renderTreeNodes(this.state.treeData)}\r\n                     </Tree>\r\n                  </div>   \r\n        );\r\n       \r\n        return (\r\n            <div id=\"page-wrapper\">\r\n            <Card title=\"角色列表\"  style={{float:\"left\",width:\"20%\"}}>\r\n                <Tooltip>\r\n                    <Search\r\n                        style={{ maxWidth: 190,marginBottom:'10px' ,marginLeft: '-20px', marginRight: '-30px', border: '0'}}\r\n                        placeholder={this.state.roleName==''?'请输入...':this.state.roleName}\r\n                        enterButton=\"查询\"\r\n                        onSearch={value => this.onSearch(value)}\r\n                        onChange={(e) => this.onValueChange(e)}\r\n                        value={this.state.roleName}\r\n                        />\r\n                </Tooltip>\r\n                <Table dataSource={dataSource} columns={columns}  pagination={false} \r\n                showHeader={false} style={{ border: '0'}}/>\r\n                 <Pagination current={this.state.pageNum} \r\n                    total={this.state.total} \r\n                    onChange={(pageNum) => this.onPageNumChange(pageNum)}/> \r\n            </Card>\r\n           \r\n            <Card title=\"权限列表\" style={{float:\"left\",width:\"80%\"}}>\r\n                <Tabs defaultActiveKey=\"webFunc\" onChange={this.onChangeTab} tabPosition={this.state.tabPosition}>\r\n                <TabPane tab=\"功能菜单\" key=\"webFunc\">\r\n                    {contents}\r\n                </TabPane>\r\n                <TabPane tab=\"Excel功能\" key=\"func\">\r\n                     {contents}\r\n                </TabPane>\r\n                <TabPane tab=\"数据查询\" key=\"select\">\r\n                    {contents}\r\n                </TabPane>\r\n                <TabPane tab=\"函数\" key=\"function\">\r\n                    {contents}\r\n                </TabPane>\r\n                <TabPane tab=\"多维分析\" key=\"cube\">\r\n                     {contents}\r\n                </TabPane>\r\n                <TabPane tab=\"仪表盘\" key=\"dashboard\">\r\n                    {contents}\r\n                </TabPane>\r\n                <TabPane tab=\"模板\" key=\"template\">\r\n                     {contents}\r\n                </TabPane>\r\n               \r\n               \r\n                <TabPane tab=\"数据权限\" key=\"table\">\r\n                    {contents}\r\n                    {/* <Tabs  onChange={this.onChangeTab} tabPosition={this.state.tabPosition}>\r\n                    {this.state.panes.map(pane => <TabPane tab={pane.title} key={pane.key}>{pane.content}</TabPane>)}\r\n                       \r\n                    </Tabs> */}\r\n                </TabPane>\r\n               \r\n                </Tabs>\r\n            </Card>\r\n             \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RuleInfo;","import   HttpService  from '../util/HttpService.jsx';\r\nclass Role{\r\n    \r\n    getRoleList(listParam){\r\n        return HttpService.post(\r\n            '/reportServer/role/getRoleList',\r\n            JSON.stringify(listParam)\r\n         );\r\n    }\r\n    getRoleInfo(roleId){\r\n        return HttpService.post('/reportServer/role/getRoleInfoById',roleId);\r\n    }\r\n    saveRoleInfo(roleInfo){\r\n        if(roleInfo._id=='null'){\r\n            return HttpService.post('/reportServer/role/addRole',JSON.stringify(roleInfo));\r\n        }else{\r\n            return HttpService.post('/reportServer/role/updateRole',JSON.stringify(roleInfo));\r\n        }\r\n    }\r\n    delRole(id){\r\n        return HttpService.post('/reportServer/role/deleteRole',id);\r\n    }\r\n    getUserListByRoleId(roleId){\r\n        return HttpService.post('/reportServer/role/getUserListByRoleId',roleId);\r\n    }\r\n    saveUserId(params){\r\n        return HttpService.post('/reportServer/role/saveOrupdateUserId',JSON.stringify(params));\r\n    }\r\n}\r\n\r\nexport default Role;","\r\nimport   HttpService  from '../util/HttpService.jsx';\r\nexport default class RuleService{\r\n    //  查询 select \r\n    getSelectClassTree(){\r\n      //  let url='/reportServer/select/getSelectClassTreeReact';\r\n      let url = \"reportServer/query/getQueryClassTree\";\r\n        return HttpService.post(url,{});\r\n    }\r\n    getAuthListByConditions(id,param){\r\n        let url='/reportServer/auth/getAuthListByConditions';\r\n        let params=[id,param];\r\n        return HttpService.post(url,JSON.stringify(params));\r\n    }\r\n\r\n    //函数 function\r\n    getFunctionClass(){\r\n        let url='/reportServer/function1/getFunctionClass';\r\n        return HttpService.post(url,{});\r\n    }\r\n    getAuthByConditions(id,param){\r\n        let url='/reportServer/auth/getAuthByConditions';\r\n        let params=[id,param];\r\n        return HttpService.post(url,JSON.stringify(params));\r\n    }\r\n    getAuthByConditionsTable(id,param){\r\n        let url='/reportServer/auth/getAuthByConditionsTable';\r\n        let params=[id,param];\r\n        return HttpService.post(url,JSON.stringify(params));\r\n    }\r\n    \r\n    //模板 \r\n    getDirectory(){\r\n        let url='/reportServer/template/getDirectory';\r\n        return HttpService.post(url,{});\r\n    }\r\n   \r\n    //功能、网站菜单\r\n    getFunRuleList(param){\r\n        let url='/reportServer/auth/getFunRuleListReact';\r\n        let params={type:param};\r\n        return HttpService.post(url,JSON.stringify(params));\r\n    }\r\n    //数据菜单\r\n    getAllAuthTypeList(){\r\n        let url='/reportServer/auth/getAllAuthTypeList';\r\n        return HttpService.post(url,{});\r\n    }\r\n\r\n    getDataList(){\r\n        let url='/reportServer/auth/getDataList';\r\n        return HttpService.post(url,{});\r\n    }\r\n\r\n    getDepartmentList(){\r\n        let url='/reportServer/auth/getDepartmentList';\r\n        return HttpService.post(url,{});\r\n    }\r\n\r\n    getAuthTypeListByType(param){\r\n         let url='/reportServer/authType/getAuthTypeListByType';\r\n        return HttpService.post(url,JSON.stringify({authType:param}));\r\n    }\r\n    //保存select\r\n    saveAuthRules(param){\r\n        let url='/reportServer/auth/saveAuthRules';\r\n        return HttpService.post(url,JSON.stringify(param));\r\n    }\r\n    getAllCube(){\r\n        let url='/reportServer/auth/getAllCube';\r\n        return HttpService.post(url,{});\r\n    }\r\n    getAllDashBoard(){\r\n        let url='/reportServer/auth/getAllDashBoard';\r\n        return HttpService.post(url,{});\r\n    }\r\n    \r\n}","import 'whatwg-fetch';\r\nimport  LocalStorge  from './LogcalStorge.jsx';\r\nconst localStorge = new LocalStorge();\r\nexport default class HttpService {\r\n    \r\n    static getBaseUrl(){\r\n\r\n        var url=window.getServerUrl();//\"http://localhost:8080/\";\r\n        return url;\r\n    }\r\n    \r\n    //\r\n    static post(url,param,n){\r\n        if((undefined==localStorge.getStorage('userInfo') && url!='/reportServer/user/encodePwd' && url!='/reportServer/user/Reactlogin') || (''==localStorge.getStorage('userInfo')  && url!='/reportServer/user/encodePwd' && url!='/reportServer/user/Reactlogin')){\r\n            window.location.href='#login';\r\n            return  new Promise((resolve, reject) => {});\r\n        }else{\r\n            let myurl=n?'http://192.168.206.49:9601/':HttpService.getBaseUrl()\r\n            console.log(myurl)\r\n            const fullUrl = myurl + url;\r\n            let opts = {\r\n                method: 'POST',\r\n                headers: {\r\n                    credentials: JSON.stringify(localStorge.getStorage('userInfo') || '')\r\n                },\r\n                body: param\r\n            };\r\n\r\n            return fetch(fullUrl, opts).then((response) => {\r\n                    //console.log(response.json())\r\n                    return response.json();\r\n                }).catch((error)=>{\r\n                    return error.json();\r\n                });\r\n        }\r\n    }\r\n\r\n    static getFile(url){\r\n        if((undefined==localStorge.getStorage('userInfo') && url!='/reportServer/user/encodePwd' && url!='/reportServer/user/Reactlogin') || (''==localStorge.getStorage('userInfo')  && url!='/reportServer/user/encodePwd' && url!='/reportServer/user/Reactlogin')){\r\n            window.location.href='#login';\r\n            return  new Promise((resolve, reject) => {});\r\n        }else{\r\n            const fullUrl = HttpService.getBaseUrl() + url;\r\n            let opts = {\r\n                method: 'GET',\r\n                headers: {\r\n                    credentials: JSON.stringify(localStorge.getStorage('userInfo') || '')\r\n                },\r\n             };\r\n\r\n            return fetch(fullUrl, opts);\r\n        }\r\n\r\n    }\r\n\r\n          \r\n    }\r\n"],"sourceRoot":""}