{"version":3,"sources":["webpack:///./src/page/dict/DictList.jsx","webpack:///./src/service/FunctionService.jsx","webpack:///./src/util/HttpService.jsx"],"names":["functionService","FunctionService","Column","ColumnGroup","Search","DictList","props","state","selectedRowKeys","selectedRows","loading","list","getAllDictName","param","HttpService","post","then","res","resultCode","setState","data","error","message","pageNum","loadUserList","searchKeyword","listType","record","alert","userId","userName","description","confirm","JSON","stringify","success","self","rowSelection","onChange","console","log","padding","marginRight","onDelButtonClick","maxWidth","marginBottom","float","onSearch","value","text","dict_id","React","Component","localStorge","LocalStorge","url","name","login","funcid","aSQL","sqlType","sql","jFunc","window","getServerUrl","n","undefined","getStorage","location","href","Promise","resolve","reject","myurl","getBaseUrl","fullUrl","opts","method","headers","credentials","body","fetch","response","json","catch"],"mappings":"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","file":"DictList.js","sourcesContent":["/*\r\n* @Author: Rosen\r\n* @Date:   2018-01-26 16:48:16\r\n* @Last Modified by:   Rosen\r\n* @Last Modified time: 2018-01-31 14:34:10\r\n*/\r\nimport React from 'react';\r\nimport { Card, Button, Divider, Input, message, Table, FormItem, Row, Col } from 'antd';\r\n\r\nimport FunctionService from '../../service/FunctionService.jsx'\r\nimport HttpService from '../../util/HttpService.jsx';\r\n\r\n\r\nconst functionService = new FunctionService();\r\nconst { Column, ColumnGroup } = Table;\r\nconst Search = Input.Search;\r\n\r\nexport default class DictList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            list: [],\r\n            selectedRows: [],\r\n        };\r\n    }\r\n    state = {\r\n        selectedRowKeys: [13], // Check here to configure the default column\r\n        selectedRows:[],\r\n        loading: false,\r\n      };\r\n    componentDidMount() {\r\n        this.getAllDictName();\r\n    }\r\n    getAllDictName()\r\n    {\r\n        let param = {};\r\n        HttpService.post('reportServer/dict/getAllDictName', null)\r\n            .then(res => {\r\n                if (res.resultCode == \"1000\")\r\n                    this.setState({ list: res.data })\r\n                else\r\n                    message.error(res.message);\r\n\r\n            });\r\n    }\r\n\r\n    // 页数发生变化的时候\r\n    onPageNumChange(pageNum) {\r\n        this.setState({\r\n            pageNum: pageNum\r\n        }, () => {\r\n            this.loadUserList();\r\n        });\r\n    }\r\n    // 搜索\r\n    onSearch(searchKeyword) {\r\n        let listType = searchKeyword === '' ? 'list' : 'search';\r\n        this.setState({\r\n            listType: listType,\r\n            pageNum: 1,\r\n            searchKeyword: searchKeyword\r\n        }, () => {\r\n            this.loadUserList();\r\n        });\r\n    }\r\n    //展示当前行信息\r\n    showCurRowMessage(record) {\r\n        alert(\"key:\" + record.userId + \" name:\" + record.userName + \" description:\" + record.description);\r\n    }\r\n\r\n    onDelButtonClick() {\r\n        // this.setState({ selectedRowKeys:[],selectedRows:[]});\r\n        if(confirm('确认删除吗？')){\r\n            HttpService.post('reportServer/dict/deleteDict', JSON.stringify(this.state.selectedRows))\r\n            .then(res => {\r\n                if (res.resultCode == \"1000\"){\r\n                    message.success(\"删除成功！\");\r\n                    this.getAllDictName();\r\n                    this.setState({selectedRowKeys:[], selectedRows: [] });\r\n                }\r\n                else\r\n                    message.error(res.message);\r\n\r\n            });\r\n        }\r\n    }\r\n \r\n\r\n    render() {\r\n        const data = this.state.list;\r\n        let self = this;\r\n\r\n        const rowSelection = {\r\n          selectedRowKeys:this.state.selectedRowKeys,\r\n          onChange:  (selectedRowKeys,selectedRows) => {\r\n            console.log('selectedRowKeys changed: ', selectedRowKeys);\r\n            this.setState({ selectedRowKeys:selectedRowKeys,selectedRows:selectedRows});\r\n          },\r\n        };\r\n        return (\r\n            <div>\r\n                <Card title=\"字典列表\" bodyStyle={{ padding: \"10px\" }}>\r\n                    <Button href=\"#/dict/DictCreator/create/0\" style={{ marginRight: \"10px\" }} type=\"primary\">新建数据字典</Button>\r\n                    <Button onClick={() => this.onDelButtonClick()} style={{ marginRight: \"10px\" }} >删除</Button>\r\n                    <Search\r\n                        style={{ maxWidth: 300, marginBottom: '10px', float: \"right\" }}\r\n                        placeholder=\"请输入...\"\r\n                        enterButton=\"查询\"\r\n                        onSearch={value => this.onSearch(value)}\r\n                    />\r\n\r\n                    <Table dataSource={this.state.list}\r\n                        rowSelection={rowSelection}\r\n                        ref=\"tableDict\"\r\n                        rowKey={\"dict_id\"}\r\n                    >\r\n                        <Column\r\n                            title=\"字典ID\"\r\n                            dataIndex=\"dict_id\"\r\n                        />\r\n                        <Column\r\n                            title=\"字典名称\"\r\n                            dataIndex=\"dict_name\"\r\n                        />\r\n                        <Column\r\n                            title=\"字典描述\"\r\n                            dataIndex=\"dict_desc\"\r\n                        />\r\n                        <Column\r\n                            title=\"调用方式\"\r\n                            dataIndex=\"func_type\"\r\n                        />\r\n                        <Column\r\n                            title=\"动作\"\r\n                            render={(text, record) => (\r\n                                <span>\r\n                                    <a href={`#/dict/DictValueList/${record.dict_id}`}>查看数据</a>\r\n                                    <Divider type=\"vertical\" />\r\n                                    <a href={`#/dict/DictCreator/update/${record.dict_id}`}>数据同步</a>\r\n                                    <Divider type=\"vertical\" />\r\n                                    <a href={`#/dict/DictCreator/update/${record.dict_id}`}>字典编辑</a>\r\n                                </span>\r\n                            )}\r\n                        />\r\n                    </Table>\r\n                </Card>\r\n            </div >\r\n        )\r\n    }\r\n}\r\n","import HttpService from '../util/HttpService.jsx';\r\nimport  LocalStorge  from '../util/LogcalStorge.jsx';\r\nconst localStorge = new LocalStorge();\r\n\r\n\r\nexport default class FunctionService {\r\n   \r\n    constructor(){\r\n      \r\n    }\r\n    // 获取函数列表\r\n    getFunctionList() {\r\n\r\n        let url = \"reportServer/function1/getAllFunctionName\";\r\n        let param = {\r\n            name: 'Hubot',\r\n            login: 'hubot'\r\n        };\r\n  \r\n        return HttpService.post(url,null);\r\n    }\r\n\r\n\r\n    // 获取函数列表\r\n    getFunctionByID(funcid) {\r\n\r\n        let url = \"reportServer/function1/getFunctionByID/\"+funcid;\r\n        let param = {\r\n            \r\n        };\r\n  \r\n        return HttpService.post(url,param);\r\n    }\r\n\r\n      // 获取SQL的输入输出参数\r\n      getSqlInOut(aSQL) {\r\n\r\n        let url = \"reportServer/sql/getInputOutputParas\";\r\n        let param = {\r\n            sqlType: \"sql\",\r\n            sql:aSQL\r\n        };\r\n  \r\n        return HttpService.post(url, JSON.stringify(param));\r\n    }\r\n\r\n    getAllFunctionClass(){\r\n        let url = \"reportServer/function1/getAllFunctionClass\";\r\n        \r\n  \r\n        return HttpService.post(url, '');\r\n    }\r\n    saveFunctionClass(param){\r\n        let url = \"reportServer/function1/createFunctionClassInfo\";\r\n        return HttpService.post(url, JSON.stringify(param));\r\n    }\r\n    updateFunctionClass(param){\r\n        let url = \"reportServer/function1/updateFunctionClassInfo\";\r\n        return HttpService.post(url, JSON.stringify(param));\r\n    }\r\n    deleteFunctionClss(param){\r\n        let url = \"reportServer/function1/deleteFunctionClassInfo\";\r\n        return HttpService.post(url, JSON.stringify(param));\r\n    }\r\n    // 保存一个函数定义\r\n    CreateFunction(jFunc) {\r\n\r\n        let url = \"reportServer/function1/saveUserSql\";\r\n        // let param = {\r\n        //     sqlType: \"sql\",\r\n        //     sql:aSQL\r\n        // };\r\n  \r\n        return HttpService.post(url, JSON.stringify(jFunc));\r\n    }\r\n\r\n}\r\n","import 'whatwg-fetch';\r\nimport  LocalStorge  from './LogcalStorge.jsx';\r\nconst localStorge = new LocalStorge();\r\nexport default class HttpService {\r\n    \r\n    static getBaseUrl(){\r\n\r\n        var url=window.getServerUrl();//\"http://localhost:8080/\";\r\n        return url;\r\n    }\r\n    \r\n    //\r\n    static post(url,param,n){\r\n        if((undefined==localStorge.getStorage('userInfo') && url!='/reportServer/user/encodePwd' && url!='/reportServer/user/Reactlogin') || (''==localStorge.getStorage('userInfo')  && url!='/reportServer/user/encodePwd' && url!='/reportServer/user/Reactlogin')){\r\n            window.location.href='#login';\r\n            return  new Promise((resolve, reject) => {});\r\n        }else{\r\n            let myurl=n?'http://192.168.206.49:9601/':HttpService.getBaseUrl()\r\n            console.log(myurl)\r\n            const fullUrl = myurl + url;\r\n            let opts = {\r\n                method: 'POST',\r\n                headers: {\r\n                    credentials: JSON.stringify(localStorge.getStorage('userInfo') || '')\r\n                },\r\n                body: param\r\n            };\r\n\r\n            return fetch(fullUrl, opts).then((response) => {\r\n                    //console.log(response.json())\r\n                    return response.json();\r\n                }).catch((error)=>{\r\n                    return error.json();\r\n                });\r\n        }\r\n    }\r\n\r\n    static getFile(url){\r\n        if((undefined==localStorge.getStorage('userInfo') && url!='/reportServer/user/encodePwd' && url!='/reportServer/user/Reactlogin') || (''==localStorge.getStorage('userInfo')  && url!='/reportServer/user/encodePwd' && url!='/reportServer/user/Reactlogin')){\r\n            window.location.href='#login';\r\n            return  new Promise((resolve, reject) => {});\r\n        }else{\r\n            const fullUrl = HttpService.getBaseUrl() + url;\r\n            let opts = {\r\n                method: 'GET',\r\n                headers: {\r\n                    credentials: JSON.stringify(localStorge.getStorage('userInfo') || '')\r\n                },\r\n             };\r\n\r\n            return fetch(fullUrl, opts);\r\n        }\r\n\r\n    }\r\n\r\n          \r\n    }\r\n"],"sourceRoot":""}